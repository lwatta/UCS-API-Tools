#!/usr/local/Cellar/python/2.7.8_1/bin/python

DOCUMENTATION = '''
---
module: ucs_firmware_policy
version_added: 0.1
short_description: ucs_firmware_policy short description
description: ucs_firmware_policydescription
author: Tory Long
'''

import sys
import json
from UcsSdk import *

EXAMPLES = '''
Examples
'''

def ucs_firmware_policy(module):

    policy_name = module.params['policy_name']
    policy_desc = module.params['policy_desc']
    blade_bundle_version = module.params['blade_bundle_version']
    rack_bundle_version = module.params['rack_bundle_version']

    results = {}

    try:
        logging.info("Connecting to UCSM at " + module.params['ucsm_ip'])
        handle = UcsHandle()
        login_status = handle.Login(
            module.params['ucsm_ip'],
            module.params['ucsm_user'],
            module.params['ucsm_pw'])
    except:
        module.fail_json(msg="Could not login to UCSM ")

    try:
        logging.info("Testing existence of " + \
                        module.params['policy_name'])
        test_obj = handle.GetManagedObject(
                     None,
                     FirmwareComputeHostPack.ClassId(),
                     {FirmwareComputeHostPack.NAME:policy_name\
                        })
    except:
        module.fail_json(msg="Could not test for existence of object")

    obj_exists = lambda test_obj: True if test_obj != [] else False

    if module.params['state'] == "present":
        if obj_exists(test_obj) == False:
            try:
                handle.AddManagedObject(
                    None,
                    FirmwareComputeHostPack.ClassId(),
                    {FirmwareComputeHostPack.BLADE_BUNDLE_VERSION: blade_bundle_version,
                     FirmwareComputeHostPack.DN: "org-root/fw-host-pack-" + policy_name,
                     FirmwareComputeHostPack.MODE: "staged",
                     FirmwareComputeHostPack.UPDATE_TRIGGER: "immediate",
                     FirmwareComputeHostPack.NAME: policy_name,
                     FirmwareComputeHostPack.STAGE_SIZE: "0",
                     FirmwareComputeHostPack.IGNORE_COMP_CHECK: "yes",
                     FirmwareComputeHostPack.POLICY_OWNER: "local",
                     FirmwareComputeHostPack.DESCR: policy_desc,
                     FirmwareComputeHostPack.RACK_BUNDLE_VERSION: rack_bundle_version})
            except:
                module.fail_json(msg="Could not create object")
        else:
                results['policy_name'] = policy_name
                results['created'] = False
                results['changed'] = False
                results['state'] = "present"
    else:
        if obj_exists(test_obj) == True:
            try:
                handle.RemoveManagedObject(test_obj)
                results['policy_name'] = policy_name
                results['created'] = False
                results['changed'] = True
                results['state'] = "absent"
            except:
                module.fail_json(msg="Could not remove object")
        else:
                results['policy_name'] = policy_name
                results['created'] = False
                results['changed'] = False
                results['state'] = "absent"

    try:
        handle.Logout()
    except UcsLogoutError:
        module.fail_json(msg="Could not logout of UCSM")

    return results

### ---------------------------------------------------------------------------
### MAIN
### ---------------------------------------------------------------------------

def main():
  module = AnsibleModule(
    argument_spec = dict(
      ucsm_ip=dict(required=True),
      ucsm_user=dict(required=True),
      ucsm_pw=dict(required=True),
      state=dict(required=True),
      policy_name=dict(required=True),
      policy_desc=dict(required=True),
      blade_bundle_version=dict(required=False),
      rack_bundle_version=dict(required=False),
      outputfile=dict(required=False),
      override=dict(required=False, default=False),
      logfile=dict(required=False, default=None),
      timeout=dict(required=False, default=0)
    ),
    supports_check_mode = False
  )

  results = ucs_firmware_policy(module)

  module.exit_json(**results)

from ansible.module_utils.basic import *
main()
