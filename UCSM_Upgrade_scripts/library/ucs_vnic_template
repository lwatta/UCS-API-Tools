#!/usr/bin/env python

DOCUMENTATION = '''
---
module: ucs_vnic_template
version_added: 0.1
short_description: ucs_vnic_template short description
description: ucs_vnic_templatedescription
author: Tory Long
'''

import sys
import json
from UcsSdk import *

EXAMPLES = '''
Examples
'''

def ucs_vnic_template(module):

    vnic_templ_name = module.params['template_name']
    vnic_templ_desc = module.params['template_desc']
    mac_pool_name = module.params['mac_pool_name']
    vnic_vlan_list = module.params['vlan_list']
    templ_type = module.params['template_type']
    vnic_mtu = module.params['mtu']
    vnic_qos_pol = module.params['qos_policy']
    vnic_switch_id = module.params['switch_id']
    vnic_nw_ctrl_pol = module.params['network_control_policy']
    vnic_templ_name_mod = "org-root/lan-conn-templ-" + vnic_templ_name

    results = {}

    try:
        logging.info("Connecting to UCSM at " + module.params['ucsm_ip'])
        handle = UcsHandle()
        login_status = handle.Login(
            module.params['ucsm_ip'],
            module.params['ucsm_user'],
            module.params['ucsm_pw'])
    except:
        module.fail_json(msg="Could not login to UCSM")

    try:
        logging.info("Testing existence of " + vnic_templ_name_mod)
        test_obj = handle.GetManagedObject(
                     None,
                     VnicLanConnTempl.ClassId(),
                     {VnicLanConnTempl.NAME:vnic_templ_name})
    except:
        module.fail_json(msg="Could not test for existence of object")

    obj_exists = lambda test_obj: True if test_obj != [] else False

    if module.params['state'] == "present":
        if obj_exists(test_obj) == False:
            try:
                mo = handle.AddManagedObject(
                        None,
                        VnicLanConnTempl.ClassId(),
                        {VnicLanConnTempl.QOS_POLICY_NAME: vnic_qos_pol,
                         VnicLanConnTempl.MTU: vnic_mtu,
                         VnicLanConnTempl.DESCR: vnic_templ_desc,
                         VnicLanConnTempl.IDENT_POOL_NAME: mac_pool_name,
                         VnicLanConnTempl.NAME: vnic_templ_name,
                         VnicLanConnTempl.TEMPL_TYPE: templ_type,
                         VnicLanConnTempl.DN: vnic_templ_name_mod,
                         VnicLanConnTempl.SWITCH_ID: vnic_switch_id,
                         VnicLanConnTempl.POLICY_OWNER: "local",
                         VnicLanConnTempl.NW_CTRL_POLICY_NAME: vnic_nw_ctrl_pol,
                         VnicLanConnTempl.PIN_TO_GROUP_NAME: "",
                         VnicLanConnTempl.STATS_POLICY_NAME: "default"})

                vnic_vlan_list = vnic_vlan_list.split(",")

                for vnic_vlan_name in vnic_vlan_list:
                    eth_if_dn = vnic_templ_name_mod + "/if-" + vnic_vlan_name
                    mo_1 = handle.AddManagedObject(
                                mo,
                                VnicEtherIf.ClassId(),
                                {VnicEtherIf.DN: eth_if_dn,
                                 VnicEtherIf.NAME: vnic_vlan_name,
                                 VnicEtherIf.DEFAULT_NET: "no"},
                                True)

                eth_def_dn = vnic_templ_name_mod + "/if-default"
                mo_2 = handle.AddManagedObject(
                            mo,
                            VnicEtherIf.ClassId(),
                            {VnicEtherIf.DN: eth_def_dn,
                             VnicEtherIf.NAME: "default",
                             VnicEtherIf.DEFAULT_NET: "no"},
                            True)
            except:
                module.fail_json(msg="Could not create object")
        else:
                results['template_name'] = vnic_templ_name
                results['created'] = False
                results['changed'] = False
                results['state'] = "present"
    else:
        if obj_exists(test_obj) == True:
            try:
                handle.RemoveManagedObject(test_obj)
                results['template_name'] = vnic_templ_name
                results['created'] = False
                results['changed'] = True
                results['state'] = "absent"
            except:
                module.fail_json(msg="Could not remove object")
        else:
                results['template_name'] = vnic_templ_name
                results['created'] = False
                results['changed'] = False
                results['state'] = "absent"

    try:
        handle.Logout()
    except UcsLogoutError:
        module.fail_json(msg="Could not logout of UCSM")

    return results

### ---------------------------------------------------------------------------
### MAIN
### ---------------------------------------------------------------------------

def main():
  module = AnsibleModule(
    argument_spec = dict(
      ucsm_ip=dict(required=True),
      ucsm_user=dict(required=True),
      ucsm_pw=dict(required=True),
      state=dict(required=True),
      template_name=dict(required=True),
      template_desc=dict(required=True),
      mac_pool_name=dict(required=True),
      vlan_list=dict(required=True),
      template_type=dict(required=False, default="updating-template"),
      mtu=dict(required=False, default="9000"),
      qos_policy=dict(required=False, default="default"),
      network_control_policy=dict(required=False, default="default"),
      switch_id=dict(required=False, default="A"),
      outputfile=dict(required=False),
      override=dict(required=False, default=False),
      logfile=dict(required=False, default=None),
      timeout=dict(required=False, default=0)
    ),
    supports_check_mode = False
  )

  results = ucs_vnic_template(module)

  module.exit_json(**results)

from ansible.module_utils.basic import *
main()
